// src/pages/ListenerPage/ActiveLectures.tsx
import { useState, useEffect, useCallback } from 'react';
import commonStyles from '../commonStyles.module.css';
import { MonitorIcon } from '../../icons/MonitorIcon';
import { useNavigate } from 'react-router-dom';
import Header from '../../components/Header/Header';
import Breadcrumbs from '../../components/Breadcrumbs/Breadcrumbs';
import { getHomeLabel, getHomePath, getRoleFromStorage } from '../../helpers/roleHelpers';
import { MonitoringWebSocket, apiService } from '../../services/api';

// interface Lecture {
//     id: string;
//     title: string;
//     lecturer: string;
//     startTime: string;
//     participants: number;
//     status: 'live' | 'recording' | 'paused' | string;
//     session_id: string;
//     start_time: string;
// }

interface Lecture {
    id: string;
    title: string;
    lecturer: string;
    startTime: string;
    participants: number | string; // –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±–∞ —Ç–∏–ø–∞
    status: 'live' | 'recording' | 'paused' | string;
    session_id: string;
    start_time: string;
}

interface SessionData {
    session_id: string;
    title?: string;
    lecturer?: string;
    start_time: string;
    participants?: number;
    status: string;
}

const ActiveLecturesPage = () => {
    const navigate = useNavigate();
    const userRole = getRoleFromStorage();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const [activeLectures, setActiveLectures] = useState<Lecture[]>([]);
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [error, setError] = useState<string>('');
    const [isConnected, setIsConnected] = useState<boolean>(false);
    const [wsStatus, setWsStatus] = useState<string>('–û—Ç–∫–ª—é—á–µ–Ω–æ');

    // WebSocket –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const [webSocket, setWebSocket] = useState<MonitoringWebSocket | null>(null);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const formatTime = (timestamp: string): string => {
        try {
            const dt = new Date(timestamp);
            return dt.toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        } catch {
            return timestamp?.slice(0, 8) || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    const loadActiveSessions = useCallback(async () => {
        try {
            setError('');
            const sessions = await apiService.getSessions(); // –¢–µ–ø–µ—Ä—å —ç—Ç–æ SessionData[]

            if (sessions && sessions.length > 0) {
                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                const active = sessions
                    .filter(s => s.status === 'active')
                    .map(session => ({
                        id: session.session_id, //session_id
                        // title: session.title || `–õ–µ–∫—Ü–∏—è ${session.session_id.slice(0, 8)}`,
                        title: session.title || `–õ–µ–∫—Ü–∏—è`, //title
                        lecturer: session.lecturer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ª–µ–∫—Ç–æ—Ä', //lecturer
                        startTime: session.start_time,
                        participants: session.participants || 0, // participants
                        status: 'live',
                        session_id: session.session_id,
                        start_time: session.start_time
                    }));

                setActiveLectures(active);
                console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫—Ü–∏–π: ${active.length}`);
            } else {
                setActiveLectures([]);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π:', err);
            setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫—Ü–∏–π');
            setActiveLectures([]);
        } finally {
            setIsLoading(false);
        }
    }, []);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
    const connectWebSocket = useCallback(async () => {
        try {
            if (webSocket) {
                webSocket.disconnect();
            }

            const ws = new MonitoringWebSocket();

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            ws.onMessage('status', (data: { status?: string; message?: string }) => {
                console.log('üì° WebSocket —Å—Ç–∞—Ç—É—Å:', data);
                setWsStatus(data.status || data.message || '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ');
            });

            ws.onMessage('session_update', (data: unknown) => {
                console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', data);
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                loadActiveSessions();
            });

            ws.onMessage('error', (data: { message?: string }) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', data);
                setError(data.message || '–û—à–∏–±–∫–∞ WebSocket');
            });

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –¥–ª—è –æ–±—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏)
            await ws.connect();
            setWebSocket(ws);
            setIsConnected(true);
            setWsStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É');

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', err);
            setError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É');
            setIsConnected(false);
            setWsStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        }
    }, [webSocket, loadActiveSessions]);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ª–µ–∫—Ü–∏–∏
    const handleViewLecture = (id: string) => {
        navigate(`/active/lecture/${id}`);
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusColor = (status: string): string => {
        switch (status) {
            case 'live': return commonStyles.statusActive;
            case 'recording': return commonStyles.statusWarning;
            case 'paused': return commonStyles.statusInactive;
            default: return '';
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
    const getStatusText = (status: string): string => {
        switch (status) {
            case 'live': return '–í –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ';
            case 'recording': return '–ò–¥–µ—Ç –∑–∞–ø–∏—Å—å';
            case 'paused': return '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
            default: return status;
        }
    };

    // –≠—Ñ—Ñ–µ–∫—Ç—ã
    useEffect(() => {
        loadActiveSessions();
        connectWebSocket();

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(loadActiveSessions, 30000);

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            clearInterval(interval);
            if (webSocket) {
                webSocket.disconnect();
            }
        };
    }, [loadActiveSessions, connectWebSocket, webSocket]);

    return (
        <div className={commonStyles.appContainer}>
            <div className={commonStyles.mainContent}>
                <Header />
                <Breadcrumbs
                    items={[
                        {
                            label: getHomeLabel(userRole),
                            path: getHomePath(userRole)
                        },
                        {
                            label: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫—Ü–∏–∏',
                            path: ''
                        }
                    ]}
                />
                <h1 className={commonStyles.sectionHeader}>–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫—Ü–∏–∏</h1>
                <p className={commonStyles.subHeader}>–¢–µ–∫—É—â–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏</p>

                {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                <div className={commonStyles.infoCard} style={{ marginBottom: '20px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                            <div style={{
                                width: '10px',
                                height: '10px',
                                borderRadius: '50%',
                                backgroundColor: isConnected ? '#10b981' : '#ef4444'
                            }}></div>
                            <span>{wsStatus}</span>
                        </div>
                        <div style={{ fontSize: '14px', color: '#666' }}>
                            –ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫—Ü–∏–π: {activeLectures.length}
                        </div>
                    </div>
                </div>

                {/* –û—à–∏–±–∫–∏ */}
                {error && (
                    <div className={commonStyles.infoCard} style={{
                        backgroundColor: '#fef2f2',
                        border: '1px solid #fecaca',
                        marginBottom: '20px'
                    }}>
                        <div style={{ color: '#dc2626' }}>‚ùå {error}</div>
                    </div>
                )}

                {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
                {isLoading && (
                    <div className={commonStyles.infoCard}>
                        <div className={commonStyles.noteText}>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫—Ü–∏–π...</div>
                    </div>
                )}

                {/* –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫—Ü–∏–π */}
                <div className={commonStyles.infoCard}>
                    {!isLoading && activeLectures.length === 0 ? (
                        <div className={commonStyles.noteText} style={{ textAlign: 'center', padding: '40px' }}>
                            {/* <MonitorIcon style={{ fontSize: '48px', color: '#ccc', marginBottom: '16px' }} /> */}
                            <MonitorIcon />
                            <div>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫—Ü–∏–π</div>
                            <div style={{ fontSize: '14px', color: '#666', marginTop: '8px' }}>
                                –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                            </div>
                        </div>
                    ) : (
                        activeLectures.map(lecture => (
                            <div
                                key={lecture.id}
                                className={commonStyles.listItem}
                                onClick={() => handleViewLecture(lecture.id)}
                                style={{
                                    cursor: 'pointer',
                                    border: '1px solid #e5e7eb',
                                    borderRadius: '8px',
                                    marginBottom: '12px',
                                    padding: '16px',
                                    transition: 'all 0.2s',
                                    backgroundColor: '#ffffff'
                                }}
                                onMouseEnter={(e) => {
                                    e.currentTarget.style.boxShadow = '0 4px 12px rgba(0,0,0,0.1)';
                                    e.currentTarget.style.transform = 'translateY(-2px)';
                                }}
                                onMouseLeave={(e) => {
                                    e.currentTarget.style.boxShadow = 'none';
                                    e.currentTarget.style.transform = 'translateY(0)';
                                }}
                            >
                                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                                    <div style={{ flex: 1 }}>
                                        <h3 style={{ margin: '0 0 12px 0', fontSize: '18px', fontWeight: '600' }}>
                                            {lecture.title}
                                        </h3>

                                        <div className={commonStyles.statusItem}>
                                            <span>–õ–µ–∫—Ç–æ—Ä:</span>
                                            <span>{lecture.lecturer}</span>
                                        </div>

                                        <div className={commonStyles.statusItem}>
                                            <span>–ù–∞—á–∞–ª–æ:</span>
                                            <span>{formatTime(lecture.startTime)}</span>
                                        </div>

                                        <div className={commonStyles.statusItem}>
                                            <span>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</span>
                                            <span>{lecture.participants}</span>
                                        </div>

                                        <div className={commonStyles.statusItem}>
                                            <span>ID —Å–µ—Å—Å–∏–∏:</span>
                                            <span style={{ fontFamily: 'monospace', fontSize: '12px' }}>
                                                {lecture.session_id?.slice(0, 12)}...
                                            </span>
                                        </div>
                                    </div>

                                    <div style={{ textAlign: 'right' }}>
                                        <div className={`${getStatusColor(lecture.status)}`} style={{
                                            padding: '4px 12px',
                                            borderRadius: '16px',
                                            fontSize: '12px',
                                            fontWeight: '600',
                                            marginBottom: '8px',
                                            display: 'inline-block'
                                        }}>
                                            üî¥ {getStatusText(lecture.status)}
                                        </div>

                                        <div style={{
                                            fontSize: '12px',
                                            color: '#666',
                                            animation: 'pulse 2s infinite'
                                        }}>
                                            LIVE
                                        </div>
                                    </div>
                                </div>
                            </div>
                        ))
                    )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                {!isLoading && (
                    <div className={commonStyles.infoCard} style={{
                        backgroundColor: '#f8fafc',
                        border: '1px solid #e2e8f0',
                        marginTop: '20px'
                    }}>
                        <h3 style={{ marginBottom: '12px', fontSize: '16px' }}>üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                        <ul style={{ margin: 0, paddingLeft: '20px', fontSize: '14px', lineHeight: '1.6' }}>
                            <li>–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥</li>
                            <li>WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</li>
                            <li>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏</li>
                            <li>–°—Ç–∞—Ç—É—Å "üî¥ LIVE" –æ–∑–Ω–∞—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é</li>
                        </ul>
                    </div>
                )}
            </div>

            {/* CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
            <style jsx>{`
                @keyframes pulse {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.5; }
                }
            `}</style> */}
        </div>
    );
};

export default ActiveLecturesPage;