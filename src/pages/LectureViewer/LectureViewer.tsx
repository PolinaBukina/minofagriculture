import { useState, useEffect, useRef, useCallback } from 'react';
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import commonStyles from '../commonStyles.module.css';
import Header from '../../components/Header/Header';
import Breadcrumbs from '../../components/Breadcrumbs/Breadcrumbs';
import MusicIcon from '../../icons/MusicIcon';
import { getHomeLabel, getHomePath, getRoleFromStorage } from '../../helpers/roleHelpers';
import { apiService } from '../../services/api';
import type { Session, SessionData } from '../../services/api';

interface Lecture {
    id: string;
    title: string;
    start: string;
    end: string;
    duration: string;
    lecturer: string;
    location: string;
    status: string;
    content: {
        original: string;
        translations: {
            en: string;
            fr: string;
            zh: string;
        };
    };
}

// interface SessionData {
//     session?: {
//         id?: string;
//         title?: string;
//         start_time: string;
//         end_time?: string;
//         lecturer?: string;
//         location?: string;
//         status?: string;
//     };
//     total_transcriptions?: number;
//     total_processed?: number;
//     processed_texts?: ProcessedText[];
// }

interface ProcessedText {
    processed_text?: string;
    text?: string;
    english_translation?: string;
    translation?: string;
}


// interface SessionInfo {
//     title?: string;
//     start_time?: string;
//     end_time?: string;
//     lecturer?: string;
//     location?: string;
//     status?: string;
// }

// interface SessionData {
//     session?: SessionInfo;
//     processed_texts?: ProcessedTextItem[];
//     total_transcriptions?: number;
//     total_processed?: number;
//     // –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
// }

interface WebSocketMessage {
    type: string;
    timestamp?: string;
    text?: string;
    processed_text?: string;
    translation?: string;
    message?: string;
    id?: string;
}

const LectureViewer = () => {
    const { t } = useTranslation();
    const { id } = useParams<{ id: string }>();
    const userRole = getRoleFromStorage();
    const location = useLocation();
    const navigate = useNavigate();

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const [language, setLanguage] = useState<'en' | 'fr' | 'zh'>('en');
    const [lecture, setLecture] = useState<Lecture | null>(null);
    const [fromArchive, setFromArchive] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');
    const [sessionData, setSessionData] = useState<SessionData | null>(null);
    const [originalText, setOriginalText] = useState('');
    type Translations = {
        en: string;
        fr: string;
        zh: string;
    };
    const [translatedTexts, setTranslatedTexts] = useState<Translations>({
        en: '',
        fr: '',
        zh: '',
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const [isLiveMode, setIsLiveMode] = useState(false);
    const [wsConnected, setWsConnected] = useState(false);
    const [liveMessages, setLiveMessages] = useState<WebSocketMessage[]>([]);
    const [processedTexts, setProcessedTexts] = useState<string[]>([]);
    const [translations, setTranslations] = useState<{ en: string; fr: string; zh: string }>({ en: '', fr: '', zh: '' });

    // WebSocket –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    const wsRef = useRef<WebSocket | null>(null);
    const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
    const lastMessageIdRef = useRef<Set<string>>(new Set());

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    useEffect(() => {
        if (location.state?.fromArchive || location.pathname.includes('/archive')) {
            setFromArchive(true);
            setIsLiveMode(false);
        } else if (location.pathname.includes('/active')) {
            setFromArchive(false);
            setIsLiveMode(true);
        }
    }, [location]);

    // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    // const connectWebSocket = useCallback(async () => {
    //     if (!isLiveMode || !id) return;

    //     try {
    //         console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è –ª–µ–∫—Ü–∏–∏: ${id}`);

    //         const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
    //         const host = 'audio.minofagriculture.ru'; // –∏–ª–∏ –≤–∞—à –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–æ–º–µ–Ω
    //         // const wsUrl = `${protocol}//${host}/ws/monitor`;
    //         const wsUrl = `wss://audio.minofagriculture.ru/ws/monitor`;

    //         console.log(`üì° WebSocket URL: ${wsUrl}`);

    //         const ws = new WebSocket(wsUrl);
    //         wsRef.current = ws;

    //         ws.onopen = () => {
    //             console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    //             setWsConnected(true);
    //             setError('');

    //             const subscribeMessage = {
    //                 type: 'subscribe',
    //                 session_id: id,
    //                 listener_id: `viewer_${Date.now()}`,
    //                 role: 'viewer'
    //             };

    //             ws.send(JSON.stringify(subscribeMessage));
    //             console.log(`üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–µ—Å—Å–∏—é: ${id}`);
    //         };

    //         ws.onmessage = (event) => {
    //             try {
    //                 const data = JSON.parse(event.data) as WebSocketMessage;
    //                 console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type, data);
    //                 handleWebSocketMessage(data);
    //             } catch (error) {
    //                 console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    //             }
    //         };

    //         ws.onclose = (event) => {
    //             console.log(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç: –∫–æ–¥ ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason}`);
    //             setWsConnected(false);

    //             if (isLiveMode && !reconnectTimeoutRef.current) {
    //                 console.log(' –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
    //                 reconnectTimeoutRef.current = setTimeout(() => {
    //                     reconnectTimeoutRef.current = null;
    //                     console.log(' –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    //                     connectWebSocket();
    //                 }, 3000);
    //             }
    //         };

    //         ws.onerror = (error) => {
    //             console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
    //             setWsConnected(false);
    //             setError('–û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    //         };

    //     } catch (error) {
    //         console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
    //         setError(`–û—à–∏–±–∫–∞ WebSocket: ${(error as Error).message}`);
    //     }
    // }, [id, isLiveMode]);

    const connectWebSocket = useCallback(async () => {
        if (!isLiveMode || !id) return;

        try {
            console.log(`–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è –ª–µ–∫—Ü–∏–∏: ${id}`);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è WebSocket
            const wsUrl = `wss://audio.minofagriculture.ru/ws/monitor`;

            console.log(`üì° WebSocket URL: ${wsUrl}`);

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if (wsRef.current) {
                wsRef.current.close();
            }

            const ws = new WebSocket(wsUrl);
            wsRef.current = ws;

            ws.onopen = () => {
                console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
                setWsConnected(true);
                setError('');

                const subscribeMessage = {
                    type: 'subscribe',
                    session_id: id,
                    listener_id: `viewer_${Date.now()}`,
                    role: 'viewer'
                };

                ws.send(JSON.stringify(subscribeMessage));
                console.log(`üì° –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–µ—Å—Å–∏—é: ${id}`);
            };

            ws.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data) as WebSocketMessage;
                    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ:', data.type, data);
                    handleWebSocketMessage(data);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };

            ws.onclose = (event) => {
                console.log(`üîå WebSocket –∑–∞–∫—Ä—ã—Ç: –∫–æ–¥ ${event.code}, –ø—Ä–∏—á–∏–Ω–∞: ${event.reason}`);
                setWsConnected(false);

                if (isLiveMode && !reconnectTimeoutRef.current) {
                    console.log(' –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
                    reconnectTimeoutRef.current = setTimeout(() => {
                        reconnectTimeoutRef.current = null;
                        console.log(' –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
                        connectWebSocket();
                    }, 3000);
                }
            };

            ws.onerror = (error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
                setWsConnected(false);
                setError('–û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');

                // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
                if (isLiveMode && !reconnectTimeoutRef.current) {
                    reconnectTimeoutRef.current = setTimeout(() => {
                        reconnectTimeoutRef.current = null;
                        connectWebSocket();
                    }, 3000);
                }
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            setError(`–û—à–∏–±–∫–∞ WebSocket: ${(error as Error).message}`);

            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if (isLiveMode && !reconnectTimeoutRef.current) {
                reconnectTimeoutRef.current = setTimeout(() => {
                    reconnectTimeoutRef.current = null;
                    connectWebSocket();
                }, 3000);
            }
        }
    }, [id, isLiveMode]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
    const handleWebSocketMessage = useCallback((data: WebSocketMessage) => {
        console.log('üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', data.type, data);

        const messageKey = `${data.type}_${data.timestamp}_${(data.text || data.processed_text || data.translation || '').slice(0, 50)}`;

        if (lastMessageIdRef.current.has(messageKey)) {
            console.log('‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω:', messageKey);
            return;
        }

        lastMessageIdRef.current.add(messageKey);

        if (lastMessageIdRef.current.size > 1000) {
            const keysArray = Array.from(lastMessageIdRef.current);
            lastMessageIdRef.current.clear();
            keysArray.slice(-500).forEach(key => lastMessageIdRef.current.add(key));
        }

        setLiveMessages(prev => {
            const updated = [...prev, { ...data, id: messageKey }];
            return updated.slice(-50);
        });

        if (data.type === 'processed' && data.processed_text) {
            const newText = data.processed_text.trim();
            if (newText) {
                console.log('‚úèÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', newText.slice(0, 50) + '...');

                setProcessedTexts(prev => {
                    if (!prev.includes(newText)) {
                        const updated = [...prev, newText];
                        const fullText = updated.join(' ');
                        setOriginalText(fullText);
                        console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: ${fullText.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                        return updated;
                    }
                    return prev;
                });
            }
        }

        if (data.type === 'translated' && data.translation) {
            const newTranslation = data.translation.trim();
            if (newTranslation) {
                console.log('üåç –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥:', newTranslation.slice(0, 50) + '...');

                setTranslations(prev => {
                    // if (!prev.includes(newTranslation)) {
                    //     const updated = [...prev, newTranslation];
                    //     const fullTranslation = updated.join(' ');
                    //     setTranslatedTexts(prevTranslated => ({
                    //         ...prevTranslated,
                    //         en: fullTranslation
                    //     }));
                    //     console.log(`üåê –û–±–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: ${fullTranslation.length} —Å–∏–º–≤–æ–ª–æ–≤`);
                    //     return updated;
                    // }
                    setTranslations(prev => {
                        const updated = {
                            ...prev,
                            en: prev.en + ' ' + newTranslation
                        };
                        setTranslatedTexts(updated);
                        return updated;
                    });

                    return prev;
                });
            }
        }

        if (data.type === 'error') {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data.message);
            setError(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
    }, []);

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        return () => {
            if (wsRef.current) {
                console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
                wsRef.current.close();
            }
            if (reconnectTimeoutRef.current) {
                clearTimeout(reconnectTimeoutRef.current);
            }
        };
    }, []);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket –¥–ª—è live —Ä–µ–∂–∏–º–∞
    useEffect(() => {
        if (isLiveMode) {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è live —Ä–µ–∂–∏–º–∞');
            connectWebSocket();
        }
    }, [isLiveMode, connectWebSocket]);

    const loadLectureData = async () => {
        if (!id) {
            setError('ID –ª–µ–∫—Ü–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
            setIsLoading(false);
            return;
        }

        try {
            setError('');
            setIsLoading(true);

            console.log(`üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏: ${id}`);
            const sessionInfo = await apiService.getSession(id);
            console.log('üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', sessionInfo);

            if (!sessionInfo) {
                setError('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                setIsLoading(false);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            const originalText = sessionInfo.transcripts?.join(' ') || '';
            console.log('üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:', originalText);

            // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è translations_multi
            const translations = {
                en: sessionInfo.translations_multi?.en?.join(' ') || sessionInfo.translations?.join(' ') || '',
                fr: sessionInfo.translations_multi?.fr?.join(' ') || '', // üÜï –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!
                zh: sessionInfo.translations_multi?.zh?.join(' ') || ''  // üÜï –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!
            };

            console.log('üåç –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', translations);
            console.log(`üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: ${translations.en.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            console.log(`üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π: ${translations.fr.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            console.log(`üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π: ${translations.zh.length} —Å–∏–º–≤–æ–ª–æ–≤`);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –ª–µ–∫—Ü–∏–∏
            const lectureData = {
                id: id,
                title: sessionInfo.title || `–õ–µ–∫—Ü–∏—è ${id.slice(0, 8)}`,
                start: sessionInfo.start_time,
                end: sessionInfo.end_time || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                duration: calculateDuration(sessionInfo.start_time, sessionInfo.end_time),
                lecturer: sessionInfo.lecturer || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ª–µ–∫—Ç–æ—Ä',
                location: sessionInfo.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                status: sessionInfo.status || 'unknown',
                content: {
                    original: originalText,
                    translations: translations // üÜï –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —è–∑—ã–∫–∏
                }
            };

            setLecture(lectureData);
            setOriginalText(originalText);
            setTranslatedTexts(translations); // üÜï –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã
            setSessionData(sessionInfo);

            console.log('‚úÖ –õ–µ–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', lectureData);

        } catch (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–µ–∫—Ü–∏–∏:', err);
            setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏`);
        } finally {
            setIsLoading(false);
        }
    };

    // –†–∞—Å—á–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const calculateDuration = (startTime?: string, endTime?: string): string => {
        if (!startTime || !endTime) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        try {
            const start = new Date(startTime);
            const end = new Date(endTime);
            const diffMs = end.getTime() - start.getTime();
            const diffMinutes = Math.floor(diffMs / 60000);
            const hours = Math.floor(diffMinutes / 60);
            const minutes = diffMinutes % 60;

            if (hours > 0) {
                return `${hours}—á ${minutes}–º`;
            } else {
                return `${minutes}–º`;
            }
        } catch {
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const formatTime = (timestamp?: string): string => {
        if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        try {
            const date = new Date(timestamp);
            return date.toLocaleString('ru-RU', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        } catch {
            return timestamp;
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        loadLectureData();
    }, [id]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–ª–µ–±–Ω—ã—Ö –∫—Ä–æ—à–µ–∫
    const getBreadcrumbs = () => {
        const baseItems = [
            {
                label: getHomeLabel(userRole),
                path: getHomePath(userRole)
            }
        ];

        if (fromArchive) {
            return [
                ...baseItems,
                {
                    label: t('archive.title'),
                    path: '/archive',
                    translationKey: 'archive.title'
                },
                {
                    label: t('lecture_viewer.back_breadcrumb', { id: id?.slice(0, 8) }),
                    path: `/archive/lecture/${id}`,
                    translationKey: 'lecture_viewer.back_breadcrumb'
                }
            ];
        } else {
            return [
                ...baseItems,
                {
                    label: t('active_lectures.title'),
                    path: '/active',
                    translationKey: 'active_lectures.title'
                },
                {
                    label: t('lecture_viewer.back_breadcrumb', { id: id?.slice(0, 8) }),
                    path: `/active/lecture/${id}`,
                    translationKey: 'lecture_viewer.back_breadcrumb'
                }
            ];
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
    const speakText = (text: string, lang: string) => {
        if (!text || !text.trim()) {
            alert('–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è');
            return;
        }

        if ('speechSynthesis' in window) {
            window.speechSynthesis.cancel();

            const utterance = new SpeechSynthesisUtterance(text);

            switch (lang) {
                case 'en':
                    utterance.lang = 'en-US';
                    break;
                case 'fr':
                    utterance.lang = 'fr-FR';
                    break;
                case 'zh':
                    utterance.lang = 'zh-CN';
                    break;
                default:
                    utterance.lang = 'ru-RU';
            }

            utterance.rate = 0.9;
            utterance.pitch = 1;
            utterance.volume = 1;

            window.speechSynthesis.speak(utterance);
            console.log(`üîä –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ (${lang}): ${text.slice(0, 50)}...`);
        } else {
            alert('–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏');
        }
    };

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    const copyToClipboard = async (text: string) => {
        try {
            await navigator.clipboard.writeText(text);
            alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        } catch {
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
        }
    };

    // –≠–∫—Å–ø–æ—Ä—Ç –ª–µ–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª
    const exportLecture = () => {
        if (!lecture) return;

        const exportText = `–õ–ï–ö–¶–ò–Ø: ${lecture.title}
            –õ–µ–∫—Ç–æ—Ä: ${lecture.lecturer}
            –î–∞—Ç–∞: ${lecture.start}
            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${lecture.duration}

            –ò–°–•–û–î–ù–´–ô –¢–ï–ö–°–¢:
            ${originalText}

            –ü–ï–†–ï–í–û–î (${language.toUpperCase()}):
            ${translatedTexts[language] || '–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}

            ---
            –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ª–µ–∫—Ü–∏–π
            ID —Å–µ—Å—Å–∏–∏: ${id}
        `;

        const blob = new Blob([exportText], { type: 'text/plain;charset=utf-8' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `lecture_${id}_${language}.txt`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);

        console.log(`üìÅ –õ–µ–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: lecture_${id}_${language}.txt`);
    };

    if (isLoading) {
        return (
            <div className={commonStyles.appContainer}>
                <div className={commonStyles.mainContentLecture}>
                    <Header />
                    <Breadcrumbs items={getBreadcrumbs()} />
                    <h1 className={commonStyles.sectionHeader}>{t('lecture_viewer.loading')}</h1>
                    <div className={commonStyles.infoCardLecture}>
                        <div style={{
                            display: 'flex',
                            flexDirection: 'column',
                            justifyContent: 'center',
                            alignItems: 'center',
                            height: '300px',
                            width: '100%',
                            gap: '20px'
                        }}>
                            <div style={{
                                width: '60px',
                                height: '60px',
                                borderRadius: '50%',
                                border: '6px solid rgba(0, 0, 0, 0.1)',
                                borderTop: '6px solid #3498db',
                                animation: 'spin 1s linear infinite'
                            }}></div>
                            <p style={{
                                color: '#555',
                                fontSize: '1.2rem',
                                fontWeight: '500'
                            }}>
                                {t('lecture_viewer.loading_lecture')} {id?.slice(0, 8)}...
                            </p>
                            {isLiveMode && (
                                <div style={{
                                    marginTop: '12px',
                                    color: '#0369a1',
                                    textAlign: 'center'
                                }}>
                                    {t('lecture_viewer.preparing_live')}
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    if (error && !lecture) {
        return (
            <div className={commonStyles.appContainer}>
                <div className={commonStyles.mainContentLecture}>
                    <Header />
                    <Breadcrumbs items={getBreadcrumbs()} />
                    <h1 className={commonStyles.sectionHeader}>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h1>
                    <div className={commonStyles.infoCardLecture} style={{
                        backgroundColor: '#fef2f2',
                        border: '1px solid #fecaca'
                    }}>
                        <div style={{ color: '#dc2626' }}>{error}</div>
                        <button
                            className={commonStyles.textButton}
                            onClick={loadLectureData}
                            style={{ marginTop: '16px' }}
                        >
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            </div>
        );
    }

    if (!lecture) {
        return (
            <div className={commonStyles.appContainer}>
                <div className={commonStyles.mainContentLecture}>
                    <Header />
                    <h1 className={commonStyles.sectionHeader}>–õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                </div>
            </div>
        );
    }

    return (
        <div className={commonStyles.appContainer}>
            <div className={commonStyles.mainContentLecture}>
                <Header />
                <Breadcrumbs items={getBreadcrumbs()} />

                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
                    <h1 className={commonStyles.sectionHeader}>{lecture.title}</h1>
                    <div style={{ display: 'flex', gap: '8px', alignItems: 'center' }}>
                        {/* üÜï –£–õ–£–ß–®–ï–ù–û: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ */}
                        {isLiveMode && (
                            <div style={{
                                padding: '6px 12px',
                                backgroundColor: wsConnected ? '#dcfce7' : '#fef3cd',
                                border: `1px solid ${wsConnected ? '#bbf7d0' : '#fecf6a'}`,
                                borderRadius: '6px',
                                fontSize: '14px',
                                color: wsConnected ? '#16a34a' : '#92400e',
                                display: 'flex',
                                alignItems: 'center',
                                gap: '6px',
                                fontWeight: '500'
                            }}>
                                <span style={{
                                    width: '8px',
                                    height: '8px',
                                    borderRadius: '50%',
                                    backgroundColor: wsConnected ? '#16a34a' : '#eab308',
                                    animation: wsConnected ? 'pulse 2s infinite' : 'none'
                                }}></span>
                                {wsConnected ? 'üî¥ LIVE' : ' –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...'}
                                {liveMessages.length > 0 && (
                                    <span style={{ fontSize: '12px', opacity: '0.8' }}>
                                        ‚Ä¢ {liveMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π
                                    </span>
                                )}
                            </div>
                        )}
                        {error && (
                            <div style={{
                                padding: '8px 12px',
                                backgroundColor: '#fef3cd',
                                border: '1px solid #fecf6a',
                                borderRadius: '4px',
                                fontSize: '12px',
                                color: '#92400e'
                            }}>
                                ‚ö†Ô∏è {error}
                            </div>
                        )}
                    </div>
                </div>

                {/* üÜï –£–õ–£–ß–®–ï–ù–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */}
                {/* {isLiveMode && (
                    <div style={{
                        padding: '16px',
                        backgroundColor: '#f0f9ff',
                        border: '1px solid #bae6fd',
                        borderRadius: '8px',
                        marginBottom: '20px'
                    }}>
                        <div style={{ fontSize: '14px', color: '#0369a1', lineHeight: '1.5' }}>
                            <strong>üì° –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:</strong> –¢–µ–∫—Å—Ç –ª–µ–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                            <br />
                            <strong>–°—Ç–∞—Ç—É—Å:</strong> {wsConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ WebSocket' : ' –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...'}
                            {liveMessages.length > 0 && (
                                <>
                                    <br />
                                    <strong>–ü–æ–ª—É—á–µ–Ω–æ:</strong> {liveMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π
                                    ‚Ä¢ –§—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞: {processedTexts.length}
                                    ‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {[translations.en, translations.fr, translations.zh].filter(t => t?.length > 0).length}
                                </>
                            )}
                        </div>
                    </div>
                )} */}

                <div className={commonStyles.infoCardLecture}>
                    <div className={commonStyles.listItemLecture}>
                        <h2>{t('lecture_viewer.details')}</h2>
                        <div className={commonStyles.statusItem}>
                            <span>ID —Å–µ—Å—Å–∏–∏:</span>
                            <span>
                                {id}
                            </span>
                        </div>
                        {lecture.lecturer && (
                            <div className={commonStyles.statusItem}>
                                <span>{t('lecture_viewer.lecturer')}:</span>
                                <span>{lecture.lecturer}</span>
                            </div>
                        )}
                        <div className={commonStyles.statusItem}>
                            <span>{t('lecture_viewer.start')}:</span>
                            <span>{lecture.start}</span>
                        </div>
                        <div className={commonStyles.statusItem}>
                            <span>{t('lecture_viewer.end')}:</span>
                            <span>{lecture.end}</span>
                        </div>
                        <div className={commonStyles.statusItem}>
                            <span>{t('lecture_viewer.duration')}:</span>
                            <span>{lecture.duration}</span>
                        </div>
                        {lecture.location && (
                            <div className={commonStyles.statusItem}>
                                <span>{t('lecture_viewer.location')}:</span>
                                <span>{lecture.location}</span>
                            </div>
                        )}
                        <div className={commonStyles.statusItem}>
                            <span>{t('lecture_viewer.status')}:</span>
                            <span>
                                {fromArchive ? '–ê—Ä—Ö–∏–≤–Ω–∞—è –ª–µ–∫—Ü–∏—è' :
                                    isLiveMode ? (wsConnected ? 'üî¥ –ê–∫—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Ü–∏—è (LIVE –ø–æ–¥–∫–ª—é—á–µ–Ω)' : ' –ê–∫—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Ü–∏—è (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...)') :
                                        'üî¥ –ê–∫—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Ü–∏—è'}
                            </span>
                        </div>
                    </div>

                    <div className={commonStyles.listItemLecture}>
                        <h2>{t('language.select')}</h2>
                        <select
                            className={commonStyles.filterSelect}
                            value={language}
                            // onChange={(e) => setLanguage(e.target.value)}
                            onChange={(e) => {
                                const lang = e.target.value;
                                if (lang === 'en' || lang === 'fr' || lang === 'zh') {
                                    setLanguage(lang);
                                }
                            }}
                        >
                            <option value="en">{t('language.english')}</option>
                            <option value="fr">{t('language.french')}</option>
                            <option value="zh">{t('language.chinese')}</option>
                        </select>

                        <div style={{ marginTop: '16px' }}>
                            <button
                                className={commonStyles.textButton}
                                onClick={exportLecture}
                            >
                                {/* –≠–∫—Å–ø–æ—Ä—Ç –ª–µ–∫—Ü–∏–∏ */}
                                {t('export')}
                            </button>
                            <button
                                className={commonStyles.textButton}
                                onClick={() => loadLectureData()}
                            >
                                {t('refresh')}
                            </button>
                            {isLiveMode && (
                                <button
                                    className={commonStyles.textButton}
                                    onClick={connectWebSocket}
                                    disabled={wsConnected}
                                >
                                    {wsConnected ? `${t('refresh_ws.ok')}` : `${t('refresh_ws.err')}`}
                                </button>
                            )}
                        </div>
                    </div>
                </div>

                <div className={commonStyles.infoCardLecture}>
                    <div className={commonStyles.listItemLecture}>
                        <div className={commonStyles.textHeaderContainer}>
                            <h2>{t('lecture_viewer.original_text')} ({originalText.length} —Å–∏–º–≤–æ–ª–æ–≤)</h2>
                            {isLiveMode && (
                                <div style={{
                                    fontSize: '12px',
                                    color: '#16a34a',
                                    marginTop: '4px',
                                    fontWeight: '500'
                                }}>
                                    {wsConnected ? '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏' : '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...'}
                                </div>
                            )}
                        </div>

                        <div className={commonStyles.ItemLecture}>
                            <div className={commonStyles.ItemLectureButtons}>
                                <button
                                    className={commonStyles.textButton}
                                    title={t('speech.synthesize')}
                                    onClick={() => speakText(originalText, 'ru')}
                                    disabled={!originalText}
                                >
                                    {t('speech.synthesize')}
                                </button>
                                <button
                                    className={commonStyles.textButton}
                                    onClick={() => navigate(`/archive/lecture/${id}/full-lecture`, {
                                        state: {
                                            originalText: lecture.content?.original,
                                            translatedText: lecture.content?.translations[language as keyof typeof lecture.content.translations],
                                            language,
                                            lecture,
                                            fromArchive
                                        }
                                    })}
                                >
                                    {t('lecture_viewer.show_full')}
                                </button>
                            </div>
                            <div className={commonStyles.LectureFullText}>
                                {/* {lecture.content?.original?.substring(0, 500) + '...' || t('lecture_viewer.text_unavailable')} */}
                                {originalText || '–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ª–µ–∫—Ü–∏—è –µ—â—ë –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ ID —Å–µ—Å—Å–∏–∏ –Ω–µ–≤–µ—Ä–µ–Ω.'}
                                {isLiveMode && wsConnected && !originalText && (
                                    <div style={{
                                        color: '#16a34a',
                                        fontStyle: 'italic',
                                        textAlign: 'center',
                                        padding: '20px'
                                    }}>
                                        üî¥ LIVE —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω<br />
                                        –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ª–µ–∫—Ü–∏–∏...
                                    </div>
                                )}
                            </div>
                        </div>

                    </div>

                    <div className={commonStyles.listItemLecture}>
                        <h2>{t('lecture_viewer.translated_text', { language: t(`language.${language}`) })}</h2>
                        {isLiveMode && (
                            <div style={{
                                fontSize: '12px',
                                color: '#16a34a',
                                marginTop: '4px',
                                fontWeight: '500'
                            }}>
                                {wsConnected ? '–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏' : '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...'}
                            </div>
                        )}

                        <div className={commonStyles.ItemLecture}>
                            <div className={commonStyles.LectureFullText}>
                                {/* {lecture.content?.translations[language as keyof typeof lecture.content.translations]?.substring(0, 500) + '...' || t('lecture_viewer.translation_unavailable')} */}
                                {translatedTexts[language] ||
                                    (language === 'en' ? 'Translation not available. The lecture may not have been processed yet.' :
                                        language === 'fr' ? 'Traduction non disponible. La conf√©rence n\'a peut-√™tre pas encore √©t√© trait√©e.' :
                                            'ÁøªËØë‰∏çÂèØÁî®„ÄÇËÆ≤Â∫ßÂèØËÉΩÂ∞öÊú™Â§ÑÁêÜ„ÄÇ')}
                                {isLiveMode && wsConnected && !translatedTexts[language] && (
                                    <div style={{
                                        color: '#16a34a',
                                        fontStyle: 'italic',
                                        textAlign: 'center',
                                        padding: '20px'
                                    }}>
                                        üî¥ LIVE —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω<br />
                                        –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...
                                    </div>
                                )}
                            </div>
                            <div className={commonStyles.ItemLectureButtons}>
                                <button
                                    className={commonStyles.textButton}
                                    onClick={() => lecture.content?.translations[language as keyof typeof lecture.content.translations] &&
                                        speakText(lecture.content.translations[language as keyof typeof lecture.content.translations], language)}
                                    title={t('speech.synthesize')}
                                >
                                    {t('speech.synthesize')}
                                </button>
                                <button
                                    className={commonStyles.textButton}
                                    onClick={() => navigate(`/archive/lecture/${lecture.id}/full-lecture`, {
                                        state: {
                                            originalText: lecture.content?.original,
                                            translatedText: lecture.content?.translations[language as keyof typeof lecture.content.translations],
                                            language,
                                            lecture,
                                            fromArchive
                                        }
                                    })}
                                >
                                    {t('lecture_viewer.show_full')}
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* üÜï –î–û–ë–ê–í–õ–ï–ù–û: Live –ª–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ –≤ listener.py) */}
                {/* {isLiveMode && liveMessages.length > 0 && (
                    <div className={commonStyles.infoCardLecture}>
                        <h2>üì° Live –ª–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</h2>
                        <div style={{
                            maxHeight: '300px',
                            overflowY: 'auto',
                            border: '1px solid #e2e8f0',
                            borderRadius: '4px',
                            padding: '12px',
                            backgroundColor: '#f8fafc'
                        }}>
                            {liveMessages.slice(-15).reverse().map((msg, index) => {
                                const timeStr = msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                                const typeIcon =
                                    msg.type === 'transcription' ? 'üó£Ô∏è' :
                                        msg.type === 'processed' ? '‚úèÔ∏è' :
                                            msg.type === 'translated' ? 'üåç' :
                                                msg.type === 'error' ? '‚ùå' :
                                                    'üì®';

                                const typeText =
                                    msg.type === 'transcription' ? '–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ' :
                                        msg.type === 'processed' ? '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ' :
                                            msg.type === 'translated' ? '–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ' :
                                                msg.type === 'error' ? '–û—à–∏–±–∫–∞' :
                                                    msg.type;

                                const content = msg.text || msg.processed_text || msg.translation || msg.message || '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ';

                                return (
                                    <div key={msg.id || index} style={{
                                        padding: '8px',
                                        borderBottom: index < liveMessages.slice(-15).length - 1 ? '1px solid #e2e8f0' : 'none',
                                        fontSize: '14px'
                                    }}>
                                        <div style={{
                                            fontSize: '12px',
                                            color: '#666',
                                            marginBottom: '4px',
                                            display: 'flex',
                                            justifyContent: 'space-between',
                                            alignItems: 'center'
                                        }}>
                                            <span>{typeIcon} {typeText}</span>
                                            <span>{timeStr}</span>
                                        </div>
                                        <div style={{
                                            color: msg.type === 'error' ? '#dc2626' : '#374151'
                                        }}>
                                            {content}
                                        </div>
                                    </div>
                                );
                            })}
                        </div>
                        <div style={{
                            marginTop: '8px',
                            fontSize: '12px',
                            color: '#6b7280',
                            textAlign: 'center'
                        }}>
                            –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {liveMessages.length}
                        </div>
                    </div>
                )} */}

                {/* üÜï –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                {/* {sessionData && (
                    <div className={commonStyles.infoCardLecture} style={{
                        backgroundColor: '#f0f9ff',
                        border: '1px solid #bae6fd'
                    }}>
                        <h3 style={{ margin: '0 0 12px 0', color: '#0369a1' }}>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏</h3>
                        <div style={{ fontSize: '14px', color: '#0369a1' }}>

                            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '8px', marginBottom: '12px' }}>
                                <div>‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π: {sessionData.total_transcriptions || 0}</div>
                                <div>‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {sessionData.total_processed || 0}</div>
                                <div>‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏: {sessionData.status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</div>
                                <div>‚Ä¢ –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: {originalText.length} —Å–∏–º–≤–æ–ª–æ–≤</div>
                            </div>

                            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '8px', marginBottom: '12px' }}>
                                <div>‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: {translatedTexts.en?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤</div>
                                <div>‚Ä¢ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: {translatedTexts.fr?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤</div>
                                <div>‚Ä¢ –ö–∏—Ç–∞–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: {translatedTexts.zh?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤</div>
                            </div>
                            {isLiveMode && (
                                <div style={{
                                    backgroundColor: '#ecfdf5',
                                    border: '1px solid #bbf7d0',
                                    borderRadius: '4px',
                                    padding: '8px',
                                    marginTop: '8px'
                                }}>
                                    <div style={{ fontWeight: '600', marginBottom: '4px', color: '#16a34a' }}>üî¥ LIVE —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</div>
                                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '4px' }}>
                                        <div>‚Ä¢ WebSocket: {wsConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}</div>
                                        <div>‚Ä¢ Live —Å–æ–æ–±—â–µ–Ω–∏–π: {liveMessages.length}</div>
                                        <div>‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {processedTexts.length}</div>
                                        <div>‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–æ–≤: {[translations.en, translations.fr, translations.zh].filter(t => t?.length > 0).length}</div>
                                    </div>
                                    {wsConnected && (
                                        <div style={{ fontSize: '12px', marginTop: '4px', color: '#059669' }}>
                                            ‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                                        </div>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>
                )} */}
            </div>
        </div>
    );
};

export default LectureViewer;